// 젠킨스 파이프라인 플러그인을 호출하기 위한 블록
pipeline {
	// 파이프라인을 실행하고 싶은 위치 정의
	agent none
	// gitlab의 소스를 jenkins 디렉토리로 내려받을 시
	// skipDefaultCheckout(true)일 경우 내려받는 프로세스 skip
	// skipDefaultCheckout(false)일 경우 gitlab 소스 체크
	options { skipDefaultCheckout(true) }
	// stage의 모음
	stages {
        stage('Docker build') {
            agent any
            steps {
				sh 'docker build -t --privileged kbi-back:latest ./exec/project_backend'
				sh 'docker build -t --privileged kbi-front:latest ./exec/project_frontend'
            }
        }
        stage('Docker run') {
            agent any
            steps {
				// 현재 동작중인 컨테이너 중 kbi_front의 이름을 가진 컨테이너를 stop
				sh 'docker ps -f name=kbi-front -q \
					| xargs --no-run-if-empty docker container stop'
				// 현재 동작중인 컨테이너 중_ kbi_back의 이름을 가진 컨테이너를 stop
				sh 'docker ps -f name=kbi-back -q \
					| xargs --no-run-if-empty docker container stop'
				// kbi_front의 이름을 가진 컨테이너를 삭제
				sh 'docker container ls -a -f name=kbi-front -q \
					| xargs -r docker container rm'
				// kbi_back의 이름을 가진 컨테이너를 _삭제
				sh 'docker container ls -a -f name=kbi-back -q \
					| xargs -r docker container rm'
				// docker image build 시 기존에 존재하던 이미지는
				// dangling 상태가 되기 때문에 이미지를 일괄 삭제
				sh 'docker images -f dangling=true && \
					docker rmi $(docker images -f "dangling=true" -q)'
				// docker container 실행
				// 하나의 docker network에 연결하여 통신이 가능하도록 설정
				sh 'docker run -d --name kbi-back \
					-v kbi-vol:/kbi_project \
					-e TZ=Asia/Seoul \
					--network kbi_net \
					kbi-back:latest'	
				sh 'docker run -d --name kbi-front \
					-p 80:80 \
					-p 443:443 \
					-v /var/jenkins_home/workspace/kbi_project/sslkey:/var/jenkins_home/workspace/kbi_project/sslkey \
					-e TZ=Asia/Seoul \
					--network kbi_net \
					kbi-front:latest'
			}
		}
	}
}